<?php

/**
 * @file
 * Test module for testing the node access system.
 *
 * This module's functionality depends on the following state variables:
 * - node_access_test.no_access_uid: Used in NodeQueryAlterTest to enable the
 *   node_access_all grant realm.
 * - node_access_test.private: When TRUE, the module controls access for nodes
 *   with a 'private' property set, and inherits the default core access for
 *   nodes without this flag. When FALSE, the module controls access for all
 *   nodes.
 * - node_access_test_secret_catalan: When set to TRUE and using the Catalan
 *   'ca' language code, makes all Catalan content secret.
 *
 * @see node_access_test_node_grants()
 * @see \Drupal\node\Tests\NodeQueryAlterTest
 * @see \Drupal\node\Tests\NodeAccessBaseTableTest
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinition;
use Drupal\node\NodeInterface;

/**
 * Implements hook_node_grants().
 *
 * Provides three grant realms:
 * - node_access_test_author: Grants users view, update, and delete privileges
 *   on nodes they have authored. Users receive a group ID matching their user
 *   ID on this realm.
 * - node_access_test: Grants users view privileges when they have the
 *   'node test view' permission. Users with this permission receive two group
 *   IDs for the realm, 8888 and 8889. Access for both realms is identical;
 *   the second group is added so that the interaction of multiple groups on
 *   a given grant realm can be tested in NodeAccessPagerTest.
 * - node_access_all: Provides grants for the user whose user ID matches the
 *   'node_access_test.no_access_uid' state variable. Access control on this
 *   realm is not provided in this module; instead,
 *   NodeQueryAlterTest::testNodeQueryAlterOverride() manually writes a node
 *   access record defining the access control for this realm.
 *
 * @see \Drupal\node\Tests\NodeQueryAlterTest::testNodeQueryAlterOverride()
 * @see \Drupal\node\Tests\NodeAccessPagerTest
 * @see node_access_test_permission()
 * @see node_access_test_node_access_records()
 */
function node_access_test_node_grants($account, $op) {
  $grants = array();
  $grants['node_access_test_author'] = array($account->id());
  if ($op == 'view' && user_access('node test view', $account)) {
    $grants['node_access_test'] = array(8888, 8889);
  }

  $no_access_uid = \Drupal::state()->get('node_access_test.no_access_uid') ?: 0;
  if ($op == 'view' && $account->id() == $no_access_uid) {
    $grants['node_access_all'] = array(0);
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 *
 * By default, records are written for all nodes. When the
 * 'node_access_test.private' state variable is set to TRUE, records
 * are only written for nodes with a "private" property set, which causes the
 * Node module to write the default global view grant for nodes that are not
 * marked private.
 *
 * @see \Drupal\node\Tests\NodeAccessBaseTableTest::setUp()
 * @see node_access_test_node_grants()
 * @see node_access_test_permission()
 */
function node_access_test_node_access_records(NodeInterface $node) {
  $grants = array();
  // For NodeAccessBaseTableTestCase, only set records for private nodes.
  if (!\Drupal::state()->get('node_access_test.private') || $node->private->value) {
    // Groups 8888 and 8889 for the node_access_test realm both receive a view
    // grant for all controlled nodes. See node_access_test_node_grants().
    $grants[] = array(
      'realm' => 'node_access_test',
      'gid' => 8888,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    $grants[] = array(
      'realm' => 'node_access_test',
      'gid' => 8889,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // For the author realm, the group ID is equivalent to a user ID, which
    // means there are many many groups of just 1 user.
    $grants[] = array(
      'realm' => 'node_access_test_author',
      'gid' => $node->getOwnerId(),
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    );
  }

  return $grants;
}

/**
 * Implements hook_permission().
 *
 * Provides a 'node test view' permission. By default, all content is
 * restricted, and users without this permission can only view content they
 * have authored. When the 'node_access_test.private' state variable is
 * TRUE, only 'private' nodes are restricted, and this permission grants access
 * to view private nodes.
 *
 * @see node_access_test_node_access_records()
 * @see node_access_test_node_grants()
 */
function node_access_test_permission() {
  return array('node test view' => array('title' => 'View content'));
}

/**
 * Implements hook_entity_base_field_info().
 */
function node_access_test_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    $fields['private'] = FieldDefinition::create('boolean')
      ->setLabel(t('Private'))
      ->setComputed(TRUE)
      ->setCustomStorage(TRUE);

    return $fields;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function node_access_test_form_node_form_alter(&$form, $form_state) {
  // Only show this checkbox for NodeAccessBaseTableTestCase.
  if (\Drupal::state()->get('node_access_test.private')) {
    $node = $form_state['controller']->getEntity($form_state);
    $form['private'] = array(
      '#type' => 'checkbox',
      '#title' => t('Private'),
      '#description' => t('Check here if this content should be set private and only shown to privileged users.'),
      '#default_value' => $node->private->value,
    );
  }
}

/**
 * Implements hook_node_load().
 */
function node_access_test_node_load($nodes) {
  $result = db_query('SELECT nid, private FROM {node_access_test} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->private = $record->private;
  }
}

/**
 * Implements hook_node_predelete().
 */
function node_access_test_node_predelete(NodeInterface $node) {
  db_delete('node_access_test')->condition('nid', $node->id())->execute();
}

/**
 * Implements hook_node_insert().
 */
function node_access_test_node_insert(NodeInterface $node) {
  _node_access_test_node_write($node);
}

/**
 * Implements hook_nodeapi_update().
 */
function node_access_test_node_update(NodeInterface $node) {
  _node_access_test_node_write($node);
}

/**
 * Saves the private status of the node in the database.
 */
function _node_access_test_node_write(NodeInterface $node) {
  db_merge('node_access_test')
    ->key('nid', $node->id())
    ->fields(array('private' => (int) $node->private->value))
    ->execute();
}

/**
 * Implements hook_node_access().
 */
function node_access_test_node_access($node, $op, $account, $langcode) {
  $secret_catalan = \Drupal::state()->get('node_access_test_secret_catalan') ?: 0;
  if ($secret_catalan && $langcode == 'ca') {
    // Make all Catalan content secret.
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}
